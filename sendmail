Class SendMail {

public static void main(String[] args) throws IOException  {
		String body="sending mail to check";
    String tomailid = "example@gmail.com";
    String subject = "test mail";
    
    sendmail(body,tomailid,subject);
	}


public void sendEmail(String msgbody,String tomailid, String mailSubject )
	{
		/*AmazonSNSClient snsclient = new AmazonSNSClient();
		if(env == LOCAL_ENV)
			snsclient = new AmazonSNSClient(new InstanceProfileCredentialsProvider(), new ClientConfiguration());
		
		PublishRequest publishRequest = new PublishRequest().withTargetArn("arn:aws:sns:us-east-1:673924706978:RedAppUserRegistration")
				.withMessage(msg.replace("<otp>", otp))
				.withSubject("Registration OTP");
		
		PublishResult pres = snsclient.publish(publishRequest);
		System.out.println(pres.toString()); */
		// Construct an object to contain the recipient address.
		//Content textContent1= new Content().withData(reqJson);
		System.out.println("the email id of receiver "+tomailid);

        Destination destination = new Destination().withToAddresses(tomailid);
       
                
        // Create the subject and body of the message.
        Content subject = new Content().withData(mailSubject);
       Content textBody = new Content().withData(BODY);
       
        //body.append(otp.toString());
      
        Content textContent = new Content().withData(msgbody);
        
        Body body = new Body().withText(textBody).withText(textContent);
        
        // Create a message with the specified subject and body.
        Message message = new Message().withSubject(subject).withBody(body);
        
        
        // Assemble the email.
        SendEmailRequest request = new SendEmailRequest().withSource(from_mail_id).withDestination(destination).withMessage(message);
        
        try
        {        
            System.out.println("Attempting to send an email through Amazon SES by using the AWS SDK for Java...");
        
            // Instantiate an Amazon SES client, which will make the service call. The service call requires your AWS credentials. 
            // Because we're not providing an argument when instantiating the client, the SDK will attempt to find your AWS credentials 
            // using the default credential provider chain. The first place the chain looks for the credentials is in environment variables 
            // AWS_ACCESS_KEY_ID and AWS_SECRET_KEY. 
            // For more information, see http://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html
            AmazonSimpleEmailServiceClient client = new AmazonSimpleEmailServiceClient();
               
            // Choose the AWS region of the Amazon SES endpoint you want to connect to. Note that your sandbox 
            // status, sending limits, and Amazon SES identity-related settings are specific to a given AWS 
            // region, so be sure to select an AWS region in which you set up Amazon SES. Here, we are using 
            // the US West (Oregon) region. Examples of other regions that Amazon SES supports are US_EAST_1 
            // and EU_WEST_1. For a complete list, see http://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html 
            Region REGION = Region.getRegion(Regions.US_EAST_1);
            client.setRegion(REGION);
       
            // Send the email.
            client.sendEmail(request);  
            System.out.println("Email sent!");
        }
        catch (Exception ex) 
        {
            System.out.println("The email was not sent.");
            System.out.println("Error message: " + ex.getMessage());
        }
    }
    }
